#include <stdio.h>
#include <stdlib.h>
#define MAX 5
void insertqueue(int);
void deletequeue(int);
void addqueue();
void ch(int);
void displayqueue();
int priorityqueue[MAX];
int f, r;

void main()
{ int n, ch;
    printf("\n1 - Insert an element into queue");
    printf("\n2 - Delete an element from queue");
    printf("\n3 - Display queue elements");
    printf("\n4 - Exit");
    addqueue();
    while (1)
    {printf("\nEnter your choice : ");
        scanf("%d", &ch);
        switch (ch)
        { case 1:printf("\nEnter value to be inserted : ");
            scanf("%d",&n);
            insertqueue(n);
            break;
        case 2: printf("\nEnter value to delete : ");
            scanf("%d",&n);
            deletequeue(n);
            break;
        case 3: displayqueue();
            break;
        case 4: exit(0);
        default:
            printf("\nWrong Choice,Re- Enter choice");
        }}}

void addqueue()
{f = r = -1; }

void insertqueue(int data)
{if (r >= MAX - 1)
    {printf("\nQueue overflow no more elements can be inserted");
        return; }
    if ((f == -1) && (r == -1))
    {f++;
        r++;
        priorityqueue[r] = data;
        return;
    }
    else
        ch(data);
    r++;
}

void ch(int data)
{int i,j;

  for (i = 0; i <= r; i++)
    {
        if (data >= priorityqueue[i])
        {
            for (j = r + 1; j > i; j--)
            {
                priorityqueue[j] = priorityqueue[j - 1];
            }
            priorityqueue[i] = data;
            return;
        }
    }
    priorityqueue[i] = data;
}

void deletequeue(int data)
{int i;
    if ((f==-1) && (r==-1))
    {
        printf("\nQueue is empty no elements to delete");
        return;
    }
    for (i = 0; i <= r; i++)
    {
        if (data == priorityqueue[i])
        {
            for (; i < r; i++)
            {
                priorityqueue[i] = priorityqueue[i + 1];
            }
        priorityqueue[i] = -99;
        r--;
        if (r == -1)
            f = -1;
        return;
        }
    }
    printf("\n%d not found in queue to delete", data);
}

void displayqueue()
{    if ((f == -1) && (r == -1))
    {
        printf("\nQueue is empty");
        return;
    }
    for (; f <= r; f++)
    {        printf(" %d ", priorityqueue[f]);}
    f = 0;
}
